names(Phi)
colnames(Phi)
colnames(Phi) <- c('X.0', colnames(Phi)[2:ncol(Phi)])
colnames(Phi)
w.mle <- solve(t(Phi) %*% Phi) %*% t(Phi) %*% df[, 1]
length(w.mle)
w.mle
coefs
params <- w.mle
dim(solve(t(Phi) %*% Phi) %*% t(Phi))
err <- (diag(31) - Phi %*% solve(t(Phi) %*% Phi) %*% t(Phi)) * %*% df[, 1]
dim(diag(31) - Phi %*% solve(t(Phi) %*% Phi) %*% t(Phi))
err <- (diag(31) - Phi %*% solve(t(Phi) %*% Phi) %*% t(Phi)) %*% df[, 1]
diag(31)
err <- (diag(300) - Phi %*% solve(t(Phi) %*% Phi) %*% t(Phi)) %*% df[, 1]
q.mle <- ((1 / nrow(Phi)) * t(err) %*% err)
q.mle
q.mle <- ((1 / nrow(Phi)) * t(err) %*% err)^(-1)
q.mle
var.mle <- q.mle * t(Phi) %*% Phi
var.mle <- q.mle %*% t(Phi) %*% Phi
t(Phi) %*% Phi
q.mle
dim(q.mle)
var.mle <- as.numeric(q.mle) %*% t(Phi) %*% Phi
var.mle <- as.numeric(q.mle) * t(Phi) %*% Phi
var.mle
var.mle <- solve(as.numeric(q.mle) * t(Phi) %*% Phi)
var.mle
dim(var.mle)
se
rowSums(var.mle)
colSums(var.mle)
diag2vec(var.mle)
install.packages('OpenMx')
dia <- OpenMx::diag2vec(var.mle)
dia
params
params^-1
se^-1
se
dia
dia^-1
dia^(1/2)
se
var.mle
ses <- OpenMx::diag2vec(var.mle)
se <- ses
coefs <- w.mle
plot(coefs, main = 'MLE Linear Regression Coefficients',
ylab = 'Coefficient Value', pch = 16, cex = 0.8,
ylim = c(min(coefs) - 1, max(coefs) + 1),
xaxt = 'n', xlab = '')
axis(side = 1, at = seq_along(coefs), labels = paste('X', 0:30, sep = ''),
las = 2, cex.axis = 0.7)
points(coefs + qnorm(0.975) * se, pch = 16, cex = 0.5, col = 'red')
points(coefs + qnorm(0.025) * se, pch = 16, cex = 0.5, col = 'red')
lines(seq_along(coefs), coefs, lty = 'dashed')
lines(seq_along(coefs), coefs + qnorm(0.975) * se, lty = 'dashed', col = 'red')
lines(seq_along(coefs), coefs + qnorm(0.025) * se, lty = 'dashed', col = 'red')
require(ggplot2)
aux <- data.frame('X_variable' = paste('X', sprintf('%02.0f', 0:30), sep = ''),
'Estimated_Coefficient'= coefs,
upper = coefs + qnorm(0.975) * se,
lower = coefs + qnorm(0.025) * se)
ggplot(aux, aes(x = X_variable, y = Estimated_Coefficient)) +
ggtitle('Confidence intervals for coefficient estimates') +
theme(plot.title = element_text(lineheight = 0.8, face = "bold")) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = upper, ymin = lower))
se
params[, 2]
params <- summary(model)[['coefficients']]
params[, 2]
q.mle <- ((1 / nrow(Phi)) * t(err) %*% err)^(-1)
var.mle <- solve(as.numeric(q.mle) * t(Phi) %*% Phi)
ses <- OpenMx::diag2vec(var.mle)
ses <- OpenMx::diag2vec(var.mle)^(1/2)
ses
se <- ses
plot(coefs, main = 'MLE Linear Regression Coefficients',
ylab = 'Coefficient Value', pch = 16, cex = 0.8,
ylim = c(min(coefs) - 1, max(coefs) + 1),
xaxt = 'n', xlab = '')
# Print x-axis
axis(side = 1, at = seq_along(coefs), labels = paste('X', 0:30, sep = ''),
las = 2, cex.axis = 0.7)
# Print upper and lower bound points
points(coefs + qnorm(0.975) * se, pch = 16, cex = 0.5, col = 'red')
points(coefs + qnorm(0.025) * se, pch = 16, cex = 0.5, col = 'red')
# Print lines uniting points
lines(seq_along(coefs), coefs, lty = 'dashed')
lines(seq_along(coefs), coefs + qnorm(0.975) * se, lty = 'dashed', col = 'red')
lines(seq_along(coefs), coefs + qnorm(0.025) * se, lty = 'dashed', col = 'red')
# PLOT 1 (WAY 2: ggplot2)
require(ggplot2)
aux <- data.frame('X_variable' = paste('X', sprintf('%02.0f', 0:30), sep = ''),
'Estimated_Coefficient'= coefs,
upper = coefs + qnorm(0.975) * se,
lower = coefs + qnorm(0.025) * se)
ggplot(aux, aes(x = X_variable, y = Estimated_Coefficient)) +
ggtitle('Confidence intervals for coefficient estimates') +
theme(plot.title = element_text(lineheight = 0.8, face = "bold")) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = upper, ymin = lower))
leverage.point <- 3 * length(coefs) / nrow(df)  # Error leverage point
df2 <- data.frame(residuals = ((model[['residuals']] -
mean(model[['residuals']])) /
sd(model[['residuals']])),
fitted = model[['fitted.values']])
df2[, 3] <- ifelse(df2[, 1] > leverage.point, 2, 1)  # For color
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
erer
err
t.hat <- Phi %*% solve(t(Phi) %*% Phi) %*% t(Phi) %*% df[, 1]
t.hat
df[, 1]
leverage.point <- 3 * length(coefs) / nrow(df)  # Error leverage point
df2 <- data.frame(residuals = ((err - mean(err)) / sd(err)),
fitted = t.hat)
df2[, 3] <- ifelse(df2[, 1] > leverage.point, 2, 1)  # For color
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
set.seed(666)
rand.rsd <- sort(rnorm(300, mean = 0, sd = 1))  # Randomised residuals
rsd <- sort(err)  # Observed residuals
plot(rsd, rand.rsd, main = 'Standardised vs. Randomised residuals',
xlab = 'Stadardised residuals',
ylab = 'Randomised residuals',
xlim = c(min(rsd), max(rsd)),
ylim = c(min(rsd), max(rsd)))#, cex = 0.8)
abline(0, 1, lty = 2, col = 'red')
OUTPUTDIR <- paste(PATH, 'ps/')
OUTPUTDIR <- paste(PATH, 'ps/ps1/')
png(paste(OUTPUTDIR, 'plot1.png'), width = 10, height = 2.5)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
png(paste(OUTPUTDIR, 'plot1.png'), width = 600, height = 400)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
png(paste(OUTPUTDIR, 'plot1.png', sep = ''), width = 600, height = 400)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
OUTPUTDIR <- paste(PATH, 'ps/ps1/', sep = '')
png(paste(OUTPUTDIR, 'plot2.png', sep = ''), width = 600, height = 400)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
OUTPUTDIR
list.files(OUTPUTDIR)
OUTPUTDIR <- paste(PATH, 'ps/', sep = '')
png(paste(OUTPUTDIR, 'ps1_plot2.png', sep = ''), width = 600, height = 400)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
plot(coefs, main = 'MLE Linear Regression Coefficients',
ylab = 'Coefficient Value', pch = 16, cex = 0.8,
ylim = c(min(coefs) - 1, max(coefs) + 1),
xaxt = 'n', xlab = '')
# Print x-axis
axis(side = 1, at = seq_along(coefs), labels = paste('X', 0:30, sep = ''),
las = 2, cex.axis = 0.7)
# Print upper and lower bound points
points(coefs + qnorm(0.975) * se, pch = 16, cex = 0.5, col = 'red')
points(coefs + qnorm(0.025) * se, pch = 16, cex = 0.5, col = 'red')
# Print lines uniting points
lines(seq_along(coefs), coefs, lty = 'dashed')
lines(seq_along(coefs), coefs + qnorm(0.975) * se, lty = 'dashed', col = 'red')
lines(seq_along(coefs), coefs + qnorm(0.025) * se, lty = 'dashed', col = 'red')
# PLOT 1 (WAY 2: ggplot2)
require(ggplot2)
aux <- data.frame('X_variable' = paste('X', sprintf('%02.0f', 0:30), sep = ''),
'Estimated_Coefficient'= coefs,
upper = coefs + qnorm(0.975) * se,
lower = coefs + qnorm(0.025) * se)
png(paste(OUTPUTDIR, 'ps1_plot1.png', sep = ''), width = 600, height = 400)
ggplot(aux, aes(x = X_variable, y = Estimated_Coefficient)) +
ggtitle('Confidence intervals for coefficient estimates') +
theme(plot.title = element_text(lineheight = 0.8, face = "bold")) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = upper, ymin = lower))
dev.off()
################################################################################
################################################################################
# PLOT 2
leverage.point <- 3 * length(coefs) / nrow(df)  # Error leverage point
df2 <- data.frame(residuals = ((err - mean(err)) / sd(err)),
fitted = t.hat)
df2[, 3] <- ifelse(df2[, 1] > leverage.point, 2, 1)  # For color
# Plot
png(paste(OUTPUTDIR, 'ps1_plot2.png', sep = ''), width = 600, height = 400)
plot(df2[, 2], df2[, 1], main = 'Residuals vs. Fitted Values',
ylab = 'Residual', xlab = 'Fitted value', pch = 16,
cex = 0.5, ylim = c(min(df2[, 1]) - 0.5,
max(df2[, 1]) + 0.5),
col = df2[, 3])
abline(h = 3 * length(coefs) / nrow(df), col = 'red', lty = 2)  # Horiz. line
dev.off()
################################################################################
################################################################################
# PLOT 3
set.seed(666)
rand.rsd <- sort(rnorm(300, mean = 0, sd = 1))  # Randomised residuals
rsd <- sort(err)  # Observed residuals
# Plot
png(paste(OUTPUTDIR, 'ps1_plot3.png', sep = ''), width = 600, height = 400)
plot(rsd, rand.rsd, main = 'Standardised vs. Randomised residuals',
xlab = 'Stadardised residuals',
ylab = 'Randomised residuals',
xlim = c(min(rsd), max(rsd)),
ylim = c(min(rsd), max(rsd)))#, cex = 0.8)
# 45 degree line
abline(0, 1, lty = 2, col = 'red')
dev.off()
fractions((7/4)/4)
fraction((7/4)/4)
MASS::fractions((7/4)/4)
MASS::fractions(19/4 - 12/5)
MASS::fractions(MASS::fractions(19/4 - 12/5)/4)
MASS::fractions((19/4 - 12/5)/4)
my.first.app <- function() {
print("Hello World!")  # This prints and returns the string
}
a <- my.first.app()
class(a)
# Function that returns the "Hello World!" string
my.first.app <- function() {
print("Hello World!")  # This returns and prints the string
}
my.first.app()
a <- my.first.app()
printQ(a)
a
class(a)
my.first.app <- function() {
#cat('Hello World!\n')
print("Hello World!")  # This prints and returns the string
#return('Hello World!')
#'Hello World!'
}
problemset.function.list <- c('my.first.app')
problemset.test <- function(){
time <- system.time({
msg <- my.first.app()
})[3]
return( list(msg=msg,time=time) )
}
problemset.check <- function(test,solutions){
check <- all( test$msg == solutions$msg )
return( as.numeric(check) )
}
problemset.check(problemset.check(), my.first.app())
problemset.test()
test <- problemset.test()
my.first.app <- function(){
return('Hello World!')
}
solutions <- problemset.test()
problemset.check(test = test, solutions = solutions)
library(MASS)
?highlight
??highlight
library(knitr)
??highlight
?highlight
knit_theme$get()
knit_theme$get()
thm = knit_theme$get("acid")
knit_theme$set(thm)
knit_theme$set('acid')
################################################################################
# Congruential generator
congruential.generator <- function(n, seed) {
################################################################################
# Algorithm parameters
m <- as.integer(2 ** 31 - 1)
a <- 48271L
c <- 1L
# Initialize residing vector
x <- c(seed, rep(NA, length = n))
# Run algorithm
sapply(2:(n + 1), function(s) { x[s] <<- (a * x[s - 1]) %% m })
# Calculate resulting vector
u <- x[2:length(x)] / m
# Return resulting object
return(u)
}
################################################################################
# Normal distribution generator
normal.simulator <- function(u, mu = 0, sigma = 1) {
################################################################################
# Initialize residing vector
z <- rep(NA, length = length(u))
# Run Box-Muller algorithm
sapply(seq(1, length(u) - 1, 2), function(x) {
u1 <- u[x]
u2 <- u[x + 1]
z1 <- sqrt(-2 * log(u2)) * cos(2 * pi * u1)
z2 <- sqrt(-2 * log(u2)) * sin(2 * pi * u1)
z[x] <<- z1
z[x + 1] <<- z2
})
# Scale to provided mean and standard deviation
x <- mu + z * sigma
# Return resulting object
return(x)
}
################################################################################
# Beta distribution generator
beta.simulator <- function(n, alpha, beta, K) {
################################################################################
# Initialize the residing vector
y <- rep(NA, length = n)
# Perform the rejection sampling algorithm
aux <- sapply(1:n, function(s) {
repeat {
x <- runif(1)
u <- runif(1)
is.in <- u < dbeta(x, alpha, beta) / (K * dunif(x))
# Check if the random point is within range or draw again
if (is.in == TRUE) {
y[s] <<- x
break
}
}
})
# Return resulting object
return(y)
}
################################################################################
# Pareto distribution generator
pareto.simulator <- function(u, alpha) {
################################################################################
# We use the inversion method
y <- (1 - u) ** (-1 / alpha)
# Return resulting object
return(y)
}
# END CODE
source('~/Desktop/bgse/courses/term1/cl/problemsets/ps2_solution_v4.R')
ls()
problemset.function.list <- c('congruential.generator','normal.simulator','beta.simulator','pareto.simulator')
problemset.test <- function(){
time <- system.time({
S <- 100000
# 1
u <- congruential.generator(S,123456789)
# 2
set.seed(12345)
u.r <- runif(S)
z <- normal.simulator(u.r,4,2)
# 3
b <- beta.simulator(S,3,2,2)
# 4
p <- pareto.simulator(u.r,3)
})[3]
return( list(u=u,z=z,b=b,p=p,time=time) )
}
problemset.check <- function(test,solutions){
check    <- rep(0,4)
check[1] <- max( abs(test$u - solutions$u) ) < 10**-6
check[2] <- max( abs(test$z - solutions$z) ) < 10**-6
check[3] <- max( abs(test$b - solutions$b) ) < 10**-6
check[4] <- max( abs(test$p - solutions$p) ) < 10**-6
# just in case some student has done something REALLY crazy
check[ !is.finite(check) ] <- 0
return( mean(check) )
}
a <- problemset.test()
a
problemset.check <- function(test,solutions){
check    <- rep(0,4)
check[1] <- max( abs(test$u - solutions$u) ) < 10**-6
check[2] <- max( abs(test$z - solutions$z) ) < 10**-6
check[3] <- max( abs(test$b - solutions$b) ) < 10**-6
check[4] <- max( abs(test$p - solutions$p) ) < 10**-6
# just in case some student has done something REALLY crazy
check[ !is.finite(check) ] <- 0
return( mean(check) )
}
source('/Users/miquel/Desktop/bgse/projects/complab/syntax/00_start.R')
source(paste(SYNTAXDIR, '01_import_data.R', sep = ''))
source(paste(SYNTAXDIR, '01_import_data.R', sep = ''))
song
source(paste(SYNTAXDIR, '01_import_data.R', sep = ''))
source(paste(SYNTAXDIR, '01_import_data.R', sep = ''))
H5close()
rm(list = ls)
rm(list = ls())
gc()
q('no')
# BEGIN CODE
################################################################################
my.chol <- function(A) {
################################################################################
# Define L matrix
L <- matrix(0, nrow(A), ncol(A))
# Double loop on rows and columns
for (i in 1:nrow(L)) {
for (j in 1:ncol(L)) {
if (i < j) {
next
} else if (i == j) {
L[i, i] <- sqrt(A[i, i] - sum(L[i, 1:(i - 1)] ** 2))
} else {
if (j == 1) {
L[i, j] <- (L[j, j] ** (-1)) * (A[i, j])
} else {
L[i, j] <- (L[j, j] ** (-1)) * (A[i, j] - sum(L[i, (j - 1):1] * L[j, (j - 1):1]))
}
}
}
}
# End
return(L)
}
################################################################################
my.forward.solve <- function(L, b) {
################################################################################
# Initialize final vector
x <- rep(0, length = length(b))
# First equation
x[1] <- b[1] / L[1, 1]
# Rest of equations
for (i in 2:length(b)) {
x[i] <- (b[i] - sum(L[i, 1:(i - 1)] * x[1:(i - 1)])) / L[i, i]
}
# End
return(x)
}
################################################################################
my.back.solve <- function(U, b) {
################################################################################
# Initializing the vector
n <- length(b)
x <- rep(0, length = n)
# First equation
x[n] <- b[n] / U[n, n]
# Rest of equations
for (i in (n - 1):1) {
x[i] <- (b[i] - sum(U[i, n:(i + 1)] * x[n:(i + 1)])) / U[i, i]
}
# End
return(x)
}
################################################################################
my.solve <- function(A, b) {
################################################################################
# Use Cholesky decomposition
L <- my.chol(A)
# Solving for intermediate y
y <- my.forward.solve(L = L, b)
# Solve final x
x <- my.back.solve(U = t(L), y)
# End
return(x)
}
# END CODE
ls()
A <- matrix( c(3,2,1,2,4,1,1,1,5) , 3  , 3 )
b <- c(4,2,1)
solve(A,b)
my.solve(A, b)
chol(A)
my.chol(A)
t(chol(A))
my.chol(A)
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
source('/Users/miquel/Desktop/bgse/courses/term1/smi/ps/ps3/ps3_v3.R')
shiny::runApp('Desktop/bgse/projects/github/acm/PS2')
shiny::runApp('Desktop/bgse/projects/github/acm/PS2/app')
shiny::runApp('Desktop/bgse/projects/github/acm/PS2/app')
